version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: destroy s3 bucket
          when: on_fail
          command: |
            aws s3 rb s3://udaproject-${CIRCLE_WORKFLOW_ID:0:7} --force
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udaproject-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udaproject-backend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            
            SUCCESS=$(curl https://kvdb.io/F9b3RS1qBhNcVFssvexYPN/migration_${CIRCLE_WORKFLOW_ID:0:7}) 
            
            echo "${SUCCESS}"

            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
          
              npm run migration:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: testing front end
          command: |
            cd frontend
            npm install
            npm run test
              
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: testing back end
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: auditing the frontend code
          command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: auditing the backend code
          command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip git openssh-client
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacityproject_backend \
              --stack-name "udaproject-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacityproject_frontend\
              --stack-name "udaproject-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "" > .circleci/ansible/inventory.txt
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udacityproject_backend" \
              --output text >> .circleci/ansible/inventory.txt

            cat  .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["80:02:57:ce:66:17:3b:0e:64:a9:23:e0:a0:aa:74:11"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add python3 git openssh-client
            pip install awscli
 
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/  
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
        - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      
      - run:
          name: enviroments
          command: |
            
            cd  backend
            touch .env
            echo TYPEORM_CONNECTION= postgres>> .env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
            echo TYPEORM_ENTITIES= ./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            echo TYPEORM_HOST= ${TYPEORM_HOST} >> .env
            echo TYPEORM_PORT= ${TYPEORM_PORT} >> .env
            echo TYPEORM_USERNAME=${TYPEORM_USERNAME} >> .env
            echo TYPEORM_PASSWORD=${TYPEORM_PASSWORD} >> .env
            echo TYPEORM_DATABASE=${TYPEORM_DATABASE} >> .env
            
            cat .env

      - run:
          name: Run migrations
          command: |
            cd backend
            npm cache clean --force
            npm install
            npm install reflect-metadata
            npm i ajv@6.9.1
            npm i winston
            npm run build
            npm audit fix
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
             curl https://kvdb.io/7XD7dUpNiRDtqTg1koW72s/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt-get install -y tar gzip python3 ansible python3-pip git openssh-client
            pip3 install awscli
      - run:
          name: Get backend url
          command: |
            
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udacityproject_backend" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udaproject-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["80:02:57:ce:66:17:3b:0e:64:a9:23:e0:a0:aa:74:11"] 
      - attach_workspace:
          at: ~/
      - run:
          name: install dependencies
          command: |
            apk add --update python3 curl ansible npm nodejs git openssh-client
            pip install awscli
      - run:
          name: install dependencies
          command: |
            npm install pm2 -g 
      - run:
          name: Deploy backend
          command: |
            cd backend
            mkdir -p ./dist
            touch ./dist/.env
            echo NODE_ENV=production >> "dist/.env"
            echo ENVIRONMENT=production >> "dist/.env"
            echo VERSION=1 >> "dist/.env"
            echo TYPEORM_CONNECTION=postgres >> "dist/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "dist/.env"
            echo TYPEORM_ENTITIES=./modules/domain/**/*.entity.js >> "dist/.env"
            echo TYPEORM_MIGRATIONS=./migrations/*.js >> "dist/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "dist/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "dist/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "dist/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "dist/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "dist/.env" 

            cat dist/.env

            npm i
            npm run build
            cd ..
            
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ./.circleci/ansible/roles/deploy/files
            cp -r artifact.tar.gz ./.circleci/ansible/roles/deploy/files/

 
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      
  
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            apk add --update python3 ansible npm nodejs curl git openssh-client
            pip install awscli
            
      - run:
          name: Get backend url and test 
          command: |

            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udacityproject_backend" \
              --output text)

            export API_URL="http://${BACKEND_IP}:3030"

            echo "${API_URL}"

            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udaproject-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip git openssh-client
      - run:
          name: "Update cloudfront distribution"
          command: |

            export OldworkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --output text)

            echo ${OldworkflowID} >> ~/oldid.txt

            cat ~/oldid.txt
 
            
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udaproject-kk1j287dhjppmz437" \
            --tags project=udaproject

      - persist_to_workspace:
          root: ~/
          paths:
            - oldid.txt      
  

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip git openssh-client
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |

            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            
            echo OldID: "${OldWorkflowID}"


            export OldWorkflowID=$(<~/oldid.txt)
            
            cat ~/oldid.txt
            
            echo fromworkspace: $(OldWorkflowID)

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
          
            echo Stack names: "${STACKS[@]}"   
                   
    
            

workflows:
  default:
    jobs:
      - cloudfront-update
      - cleanup:
          requires: [cloudfront-update]

          